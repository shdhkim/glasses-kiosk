name: Deploy Spring Boot with Docker

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 워크플로우 실행

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Gradle 실행 권한 추가
      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      # 3. Java 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 4. Gradle 빌드
      - name: Build Project
        run: ./gradlew build

      # 5. 빌드 아티팩트 확인
      - name: Verify Build Artifacts
        run: ls -la build/libs/

      # 6. Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 7. Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/spring-app:latest

      # 8. EC2로 배포
      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.HOST }}  # EC2의 퍼블릭 IP 또는 도메인 이름
          USER: ${{ secrets.DEPLOY_USER }}  # EC2의 SSH 사용자 이름
          KEY: ${{ secrets.DEPLOY_KEY }}  # SSH 개인 키
          IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/spring-app:latest  # Docker 이미지 이름
        run: |
          # SSH 설정
          mkdir -p ~/.ssh
          echo "$KEY" > deploy_key.pem
          chmod 400 deploy_key.pem
          echo "Adding $HOST to known_hosts"
          if [ -z "$HOST" ]; then echo "HOST is not set"; exit 1; fi
          ssh-keyscan -H $HOST >> ~/.ssh/known_hosts || exit 1

          # EC2 접속 및 Docker 관련 작업 실행
          ssh -i deploy_key.pem $USER@$HOST <<EOF
            # Docker 설치 확인 및 설치
            if ! [ -x "$(command -v docker)" ]; then
              sudo yum update -y
              sudo yum install -y docker
              sudo service docker start
            fi

            # Docker 그룹에 사용자 추가 및 권한 적용
            sudo usermod -aG docker $USER
            newgrp docker || true

            # 기존 컨테이너 중지 및 삭제
            if docker ps -q --filter "name=spring-app"; then
              docker stop spring-app
              docker rm spring-app
            fi

            # 최신 이미지 가져오기 및 컨테이너 실행
            docker pull $IMAGE_NAME
            docker run -d --name spring-app -p 8080:8080 $IMAGE_NAME
          EOF