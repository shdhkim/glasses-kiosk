name: Deploy Spring Boot with Docker

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3. Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/spring-app:latest

      # 4. EC2로 배포
      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.HOST }}
          USER: ${{ secrets.DEPLOY_USER }}
          KEY: ${{ secrets.DEPLOY_KEY }}
          IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/spring-app:latest
        run: |
          #  SSH 설정
          mkdir -p ~/.ssh
          ssh-keyscan -H $HOST >> ~/.ssh/known_hosts
          echo "$KEY" > deploy_key.pem
          chmod 400 deploy_key.pem
          
          #  EC2에 접속하여 Docker 설치 확인 및 실행
          ssh -i deploy_key.pem $USER@$HOST <<EOF
            # Docker 설치 확인 및 설치
            if ! [ -x "$(command -v docker)" ]; then
              sudo yum update -y
              sudo yum install -y docker
              sudo service docker start
              sudo usermod -aG docker $USER
            fi

            # 기존 컨테이너 중지 및 삭제
            docker stop spring-app || true
            docker rm spring-app || true

            # 최신 이미지 가져오기 및 실행
            docker pull $IMAGE_NAME
            docker run -d --name spring-app -p 8080:8080 $IMAGE_NAME
          EOF